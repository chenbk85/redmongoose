// Generated by CoffeeScript 1.7.1
var AbstractConfiguration, InvalidParametersError, MongoConfiguration, NotImplementedError, RedisConfiguration, sampleMongoConfiguration, sampleRedisConfiguration,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AbstractConfiguration = (function() {
  function AbstractConfiguration(rawConfiguration) {
    this.rawConfiguration = rawConfiguration;
    this.validateAndMergeWithDefaults();
  }

  AbstractConfiguration.prototype.validateAndMergeWithDefaults = function() {
    throw new NotImplementedError("The subclass must implement this method!");
  };

  AbstractConfiguration.prototype.getPort = function() {
    return this.rawConfiguration.port;
  };

  AbstractConfiguration.prototype.getHost = function() {
    return this.rawConfiguration.host;
  };

  AbstractConfiguration.prototype.getPassword = function() {
    return this.rawConfiguration.password;
  };

  AbstractConfiguration.prototype.getEnabled = function() {
    return this.rawConfiguration.enabled;
  };

  return AbstractConfiguration;

})();

RedisConfiguration = (function(_super) {
  var defaultParameters;

  __extends(RedisConfiguration, _super);

  function RedisConfiguration() {
    return RedisConfiguration.__super__.constructor.apply(this, arguments);
  }

  defaultParameters = {
    port: 6379,
    host: "localhost",
    password: "",
    enabled: false
  };

  RedisConfiguration.prototype.validateAndMergeWithDefaults = function() {};

  return RedisConfiguration;

})(AbstractConfiguration);

module.exports.RedisConfiguration = RedisConfiguration;

module.exports.MongoConfiguration = MongoConfiguration = (function(_super) {
  __extends(MongoConfiguration, _super);

  function MongoConfiguration() {
    return MongoConfiguration.__super__.constructor.apply(this, arguments);
  }

  return MongoConfiguration;

})(AbstractConfiguration);

sampleRedisConfiguration = {
  enable: true,
  port: 6379,
  host: "localhost",
  password: "",
  node_redis_options: {
    socket_nodelay: false
  }
};

sampleMongoConfiguration = {
  enable: true,
  port: 27017,
  host: "localhost",
  password: "",
  database: "coco"
};

InvalidParametersError = (function(_super) {
  __extends(InvalidParametersError, _super);

  function InvalidParametersError() {
    return InvalidParametersError.__super__.constructor.apply(this, arguments);
  }

  return InvalidParametersError;

})(Error);

NotImplementedError = (function(_super) {
  __extends(NotImplementedError, _super);

  function NotImplementedError() {
    return NotImplementedError.__super__.constructor.apply(this, arguments);
  }

  return NotImplementedError;

})(Error);
