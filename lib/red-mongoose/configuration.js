// Generated by CoffeeScript 1.7.1
var Configuration, MongoConfiguration, RedisConfiguration, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('lodash');

Configuration = (function() {
  function Configuration(rawConfiguration) {
    this.rawConfiguration = rawConfiguration;
    this.validateAndMergeWithDefaults();
  }

  Configuration.prototype.validateAndMergeWithDefaults = function() {
    return this.configuration = _.merge(this.defaultParameters, this.rawConfiguration);
  };

  Configuration.prototype.getPort = function() {
    return this.configuration.port;
  };

  Configuration.prototype.getPassword = function() {
    return this.configuration.password;
  };

  Configuration.prototype.getEnabled = function() {
    return this.configuration.enabled;
  };

  return Configuration;

})();

module.exports.RedisConfiguration = RedisConfiguration = (function(_super) {
  __extends(RedisConfiguration, _super);

  function RedisConfiguration(rawConfiguration) {
    this.rawConfiguration = rawConfiguration;
    this.defaultParameters = {
      port: 6379,
      host: "localhost",
      password: null,
      enabled: false,
      node_redis_options: {}
    };
    RedisConfiguration.__super__.constructor.call(this, this.rawConfiguration);
  }

  RedisConfiguration.prototype.validateAndMergeWithDefaults = function() {
    RedisConfiguration.__super__.validateAndMergeWithDefaults.call(this);
    if (this.configuration.password) {
      return this.configuration.node_redis_options.auth_pass = this.configuration.password;
    }
  };

  RedisConfiguration.prototype.getNodeRedisOptions = function() {
    return this.configuration.node_redis_options;
  };

  RedisConfiguration.prototype.getHost = function() {
    return this.configuration.host;
  };

  return RedisConfiguration;

})(Configuration);

module.exports.MongoConfiguration = MongoConfiguration = (function(_super) {
  __extends(MongoConfiguration, _super);

  function MongoConfiguration(rawConfiguration) {
    this.rawConfiguration = rawConfiguration;
    this.defaultParameters = {
      uri: "mongodb://localhost/cacheTesting",
      password: null,
      enabled: false,
      mongoose_options: {}
    };
    MongoConfiguration.__super__.constructor.call(this, this.rawConfiguration);
  }

  MongoConfiguration.prototype.getMongooseOptions = function() {
    return this.configuration.mongoose_options;
  };

  MongoConfiguration.prototype.getURI = function() {
    return this.configuration.uri;
  };

  return MongoConfiguration;

})(Configuration);
